import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import numpy as np
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import pandas as pd
from datetime import datetime

class ChessClassifierApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Chess Piece Classifier")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        try:
            self.model = load_model("chess_model_updated.keras")
            self.status_label = tk.Label(root, text="–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", fg="green")
        except Exception as e:
            self.model = None
            self.status_label = tk.Label(root, text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}", fg="red")
        
        self.status_label.pack(pady=10)
        
        # –ö–ª–∞—Å—Å—ã —Ñ–∏–≥—É—Ä
        self.class_labels = {
            'Queen-Resized': '–§–µ—Ä–∑—å üëë',
            'Rook-resize': '–õ–∞–¥—å—è üè∞',
            'bishop_resized': '–°–ª–æ–Ω üêò',
            'knight-resize': '–ö–æ–Ω—å üê¥',
            'pawn_resized': '–ü–µ—à–∫–∞ üßç‚Äç‚ôÇÔ∏è'
        }
        
        # –õ–æ–≥-—Ñ–∞–π–ª
        self.log_file = "predictions_log.csv"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
    def create_widgets(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.upload_button = tk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=self.upload_image)
        self.upload_button.pack(side=tk.LEFT, padx=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = tk.Frame(self.root)
        self.image_frame.pack(pady=10)
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_label = tk.Label(self.image_frame, text="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.image_label.pack()
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = tk.Frame(self.root)
        self.results_frame.pack(pady=10, fill=tk.BOTH, expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        self.create_history_table()
    
    def create_history_table(self):
        columns = ("–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        self.history_tree = ttk.Treeview(self.results_frame, columns=columns, show="headings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for col in columns:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, width=100)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(self.results_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscroll=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.load_history()
    
    def load_history(self):
        if os.path.exists(self.log_file):
            try:
                df_log = pd.read_csv(self.log_file, encoding='utf-8', errors='replace')
                
                # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for _, row in df_log.iterrows():
                    self.history_tree.insert("", tk.END, values=(
                        row.get("–§–∞–π–ª", ""),
                        row.get("–ö–ª–∞—Å—Å", ""),
                        row.get("–¶–≤–µ—Ç", ""),
                        row.get("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "")
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def upload_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )
        
        if not file_path:
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.display_image(file_path)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.model:
            self.classify_image(file_path)
    
    def display_image(self, file_path):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(file_path)
            img = self.resize_image(img, (300, 300))
            img_tk = ImageTk.PhotoImage(img)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            
            self.image_label = tk.Label(self.image_frame, image=img_tk)
            self.image_label.image = img_tk  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
            self.image_label.pack()
            
        except Exception as e:
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            self.image_label = tk.Label(self.image_frame, text=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.image_label.pack()
    
    def resize_image(self, img, size):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        width, height = img.size
        ratio = min(size[0]/width, size[1]/height)
        new_width = int(width * ratio)
        new_height = int(height * ratio)
        return img.resize((new_width, new_height), Image.LANCZOS)
    
    def detect_color(self, file_path):
        try:
            img = Image.open(file_path).convert("L")
            arr = np.array(img)
            h, w = arr.shape
            cx, cy = w // 2, h // 2
            s = min(h, w) // 2
            crop = arr[cy - s//2:cy + s//2, cx - s//2:cx + s//2]
            crop_valid = crop[crop < 240]
            
            if len(crop_valid) == 0:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç ‚ùî", 0
            
            mean = np.mean(crop_valid)
            color = "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è" if mean < 127 else "–ë–µ–ª–∞—è ‚ôô"
            return color, mean
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞: {e}", 0
    
    def classify_image(self, file_path):
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            fig_color, brightness = self.detect_color(file_path)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            img = image.load_img(file_path, target_size=(224, 224))
            x = image.img_to_array(img)
            x = np.expand_dims(x, axis=0) / 255.0
            
            prediction = self.model.predict(x)[0]
            idx = np.argmax(prediction)
            confidence = float(np.max(prediction)) * 100
            predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if hasattr(self, "result_label"):
                self.result_label.destroy()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = f"–ö–ª–∞—Å—Å: {predicted_class}\n–¶–≤–µ—Ç: {fig_color}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}%"
            self.result_label = tk.Label(self.image_frame, text=result_text, font=("Arial", 12))
            self.result_label.pack(pady=10)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(os.path.basename(file_path), predicted_class, fig_color, f"{confidence:.2f}%")
            
        except Exception as e:
            if hasattr(self, "result_label"):
                self.result_label.destroy()
            self.result_label = tk.Label(self.image_frame, text=f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", fg="red")
            self.result_label.pack(pady=10)
    
    def save_to_history(self, file_name, class_name, color, confidence):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.history_tree.insert("", 0, values=(file_name, class_name, color, confidence))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        new_entry = pd.DataFrame([{
            "–§–∞–π–ª": file_name,
            "–ö–ª–∞—Å—Å": class_name,
            "–¶–≤–µ—Ç": color,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": confidence
        }])
        
        if os.path.exists(self.log_file):
            try:
                current = pd.read_csv(self.log_file, encoding='utf-8')
                if set(current.columns) == set(new_entry.columns):
                    new_entry.to_csv(self.log_file, mode='a', index=False, header=False, encoding='utf-8-sig')
                else:
                    new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
            except:
                new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
        else:
            new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')

if __name__ == "__main__":
    root = tk.Tk()
    app = ChessClassifierApp(root)
    root.mainloop() 