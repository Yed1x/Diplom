import tkinter as tk
from tkinter import ttk
import customtkinter as ctk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import numpy as np
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import pandas as pd
from datetime import datetime
import json
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from idlelib.tooltip import Hovertip
import time  # –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
import cv2
import threading # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
import sys # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sys

class ChessClassifierApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Chess Piece Classifier Pro")
        self.root.geometry("1200x800")
        self.root.resizable(True, True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        self.color_scheme = {
            "primary": "#4361ee",       # –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
            "secondary": "#7209b7",     # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            "accent": "#f72585",        # –†–æ–∑–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
            "warning": "#ffd60a",       # –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π
            "error": "#e63946",         # –ö—Ä–∞—Å–Ω—ã–π
            "success": "#2ec4b6",       # –ë–∏—Ä—é–∑–æ–≤—ã–π
            "background": "#001233",    # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
            "surface": "#023047",       # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            "text": "#caf0f8",         # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ç–µ–∫—Å—Ç
            "gradient_start": "#4cc9f0",  # –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞—á–∞–ª–æ
            "gradient_end": "#4895ef",    # –ì—Ä–∞–¥–∏–µ–Ω—Ç –∫–æ–Ω–µ—Ü
            "button_hover": "#f72585",    # –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            "card_bg": "#0a1128"        # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –Ω–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        self.styles = {
            "heading": ctk.CTkFont(family="Helvetica", size=28, weight="bold"),
            "subheading": ctk.CTkFont(family="Helvetica", size=20, weight="bold"),
            "button": ctk.CTkFont(family="Helvetica", size=14, weight="bold"),
            "text": ctk.CTkFont(family="Helvetica", size=12),
            "small": ctk.CTkFont(family="Helvetica", size=10)
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_effects = {
            "normal": {
                "fg_color": self.color_scheme["primary"],
                "hover_color": self.color_scheme["button_hover"],
                "border_width": 2,
                "border_color": self.color_scheme["accent"],
                "corner_radius": 15
            },
            "accent": {
                "fg_color": self.color_scheme["secondary"],
                "hover_color": self.color_scheme["accent"],
                "border_width": 2,
                "border_color": self.color_scheme["primary"],
                "corner_radius": 15
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è, –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
            if getattr(sys, 'frozen', False):
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∏–∑ PyInstaller
                base_path = sys._MEIPASS
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
                base_path = os.path.dirname(__file__)

            model_path = os.path.join(base_path, "final_model.h5")
            self.model = load_model(model_path) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            self.model_loaded = True
        except Exception as e:
            self.model = None
            self.model_loaded = False
        
        # –ö–ª–∞—Å—Å—ã —Ñ–∏–≥—É—Ä
        self.class_labels = {
            'bishop': '–°–ª–æ–Ω üêò',
            'knight': '–ö–æ–Ω—å üê¥',
            'pawn': '–ü–µ—à–∫–∞ üßç‚Äç‚ôÇÔ∏è',
            'queen': '–§–µ—Ä–∑—å üëë',
            'rook': '–õ–∞–¥—å—è üè∞'
        }
        
        self.log_file = "predictions_log.csv"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            "total_classifications": 0,
            "by_class": {},
            "by_color": {"–ë–µ–ª–∞—è ‚ôô": 0, "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è": 0}
        }
        
        self.load_stats()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        self.splash_frame = ctk.CTkFrame(self.root)
        self.splash_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        self.create_splash_widgets()

    def create_splash_widgets(self):
        # –§–æ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
            if getattr(sys, 'frozen', False):
                base_path = sys._MEIPASS
            else:
                base_path = os.path.dirname(__file__)

            # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            background_image_path = os.path.join(base_path, "Fon.jpg") # <--- –û–ë–ù–û–í–õ–ï–ù–û
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            original_image = Image.open(background_image_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            window_width = self.root.winfo_width()
            window_height = self.root.winfo_height()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            if window_width == 1 or window_height == 1:
                 window_width = 1200 # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                 window_height = 800 # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                 
            resized_image = original_image.resize((window_width, window_height), Image.LANCZOS)
            self.splash_background_image = ImageTk.PhotoImage(resized_image)

            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É —Å —Ñ–æ–Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            self.splash_background_label = ctk.CTkLabel(
                self.splash_frame,
                image=self.splash_background_image,
                text=""
            )
            self.splash_background_label.place(x=0, y=0, relwidth=1, relheight=1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            self.root.bind('<Configure>', self.resize_splash_background)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç
            self.splash_frame.configure(fg_color=self.color_scheme["background"])

        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
        ctk.CTkLabel(
            self.splash_frame,
            text="Chess Piece Classifier Pro",
            font=self.styles["heading"],
            text_color="white" # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ–Ω–µ
        ).pack(pady=(50, 20))
        
        ctk.CTkLabel(
            self.splash_frame,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            font=self.styles["subheading"],
            text_color="white" # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ–Ω–µ
        ).pack(pady=20)
        
        start_button = ctk.CTkButton(
            self.splash_frame,
            text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self.show_main_app,
            font=self.styles["button"],
            **self.button_effects["normal"]
        )
        start_button.pack(pady=30)

    def resize_splash_background(self, event):
        # –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if hasattr(self, 'splash_background_label'):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ—Ä–µ–π–º–∞
                frame_width = self.splash_frame.winfo_width()
                frame_height = self.splash_frame.winfo_height()
                
                if frame_width > 1 and frame_height > 1:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
                    if getattr(sys, 'frozen', False):
                        base_path = sys._MEIPASS
                    else:
                        base_path = os.path.dirname(__file__)
                    
                    # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    background_image_path = os.path.join(base_path, "Fon.jpg") # <--- –û–ë–ù–û–í–õ–ï–ù–û
                    
                    original_image = Image.open(background_image_path)
                    
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ—Ä–µ–π–º–∞
                    resized_image = original_image.resize((frame_width, frame_height), Image.LANCZOS)
                    self.splash_background_image = ImageTk.PhotoImage(resized_image)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∫–∏
                    self.splash_background_label.configure(image=self.splash_background_image)
                    self.splash_background_label.image = self.splash_background_image
                    
            except Exception as e:
                 print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ–Ω–∞: {e}")

    def show_main_app(self):
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.splash_frame.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_menu()
        self.create_widgets()
        self.add_tooltips()
        self.batch_process()
        self.add_settings()
        self.compare_images()
        self.add_sound_effects()
        self.setup_hotkeys()
        self.setup_drag_and_drop()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        status_text = "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞" if self.model_loaded else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"
        status_color = self.color_scheme["success"] if self.model_loaded else self.color_scheme["error"]
        self.status_label.configure(text=status_text, text_color=status_color)

    def setup_menu(self):
        menubar = tk.Menu(self.root, bg=self.color_scheme["surface"], fg=self.color_scheme["text"])
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é —Ñ–∞–π–ª–∞
        file_menu = tk.Menu(
            menubar, 
            tearoff=0,
            bg=self.color_scheme["surface"],
            fg=self.color_scheme["text"],
            activebackground=self.color_scheme["accent"],
            activeforeground=self.color_scheme["text"],
            font=self.styles["text"]
        )
        menubar.add_cascade(
            label="üìÅ –§–∞–π–ª",
            menu=file_menu,
            font=self.styles["button"]
        )
        
        file_menu.add_command(
            label="üñºÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            command=self.upload_image,
            font=self.styles["text"]
        )
        file_menu.add_command(
            label="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏",
            command=self.export_history,
            font=self.styles["text"]
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="‚ùå –í—ã—Ö–æ–¥",
            command=self.root.quit,
            font=self.styles["text"]
        )
        
        # –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_menu = tk.Menu(
            menubar,
            tearoff=0,
            bg=self.color_scheme["surface"],
            fg=self.color_scheme["text"],
            activebackground=self.color_scheme["accent"],
            activeforeground=self.color_scheme["text"],
            font=self.styles["text"]
        )
        menubar.add_cascade(
            label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            menu=stats_menu,
            font=self.styles["button"]
        )
        stats_menu.add_command(
            label="üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            command=self.show_statistics,
            font=self.styles["text"]
        )
        stats_menu.add_command(
            label="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            command=self.reset_statistics,
            font=self.styles["text"]
        )
        
        # –ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_menu = tk.Menu(
            menubar,
            tearoff=0,
            bg=self.color_scheme["surface"],
            fg=self.color_scheme["text"],
            activebackground=self.color_scheme["accent"],
            activeforeground=self.color_scheme["text"],
            font=self.styles["text"]
        )
        menubar.add_cascade(
            label="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            menu=tools_menu,
            font=self.styles["button"]
        )
        tools_menu.add_command(
            label="üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            command=self.open_batch_window,
            font=self.styles["text"]
        )
        tools_menu.add_command(
            label="üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            command=self.open_compare_window,
            font=self.styles["text"]
        )
        
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_menu = tk.Menu(
            menubar,
            tearoff=0,
            bg=self.color_scheme["surface"],
            fg=self.color_scheme["text"],
            activebackground=self.color_scheme["accent"],
            activeforeground=self.color_scheme["text"],
            font=self.styles["text"]
        )
        menubar.add_cascade(
            label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            menu=settings_menu,
            font=self.styles["button"]
        )
        settings_menu.add_command(
            label="üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
            command=self.open_settings,
            font=self.styles["text"]
        )
        
        # –ú–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏
        help_menu = tk.Menu(
            menubar,
            tearoff=0,
            bg=self.color_scheme["surface"],
            fg=self.color_scheme["text"],
            activebackground=self.color_scheme["accent"],
            activeforeground=self.color_scheme["text"],
            font=self.styles["text"]
        )
        menubar.add_cascade(
            label="‚ùì –°–ø—Ä–∞–≤–∫–∞",
            menu=help_menu,
            font=self.styles["button"]
        )
        help_menu.add_command(
            label="üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            command=lambda: messagebox.showinfo(
                "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chess Piece Classifier Pro!\n\n"
                "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π —Ñ–∏–≥—É—Ä—ã\n"
                "2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
                "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
            ),
            font=self.styles["text"]
        )
        help_menu.add_command(
            label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            command=lambda: messagebox.showinfo(
                "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                "Chess Piece Classifier Pro\n"
                "–í–µ—Ä—Å–∏—è 1.0\n\n"
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —à–∞—Ö–º–∞—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä\n"
                "—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
            ),
            font=self.styles["text"]
        )
        help_menu.add_separator()
        help_menu.add_command(
            label="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            command=self.check_for_updates,
            font=self.styles["text"]
        )
    
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        self.main_container = ctk.CTkFrame(
            self.root,
            fg_color=self.color_scheme["background"]
        )
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—Ç–µ–∫–ª–∞
        self.toolbar = ctk.CTkFrame(
            self.main_container,
            fg_color=self.color_scheme["surface"],
            corner_radius=15
        )
        self.toolbar.pack(fill=tk.X, pady=(0, 10))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.upload_button = ctk.CTkButton(
            self.toolbar,
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            command=self.upload_image,
            font=self.styles["button"],
            height=45,
            width=200,
            **self.button_effects["normal"],
            text_color=self.color_scheme["text"]
        )
        self.upload_button.pack(side=tk.LEFT, padx=10, pady=5)
        
        self.stats_button = ctk.CTkButton(
            self.toolbar,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            command=self.show_statistics,
            font=self.styles["button"],
            height=45,
            width=200,
            **self.button_effects["accent"],
            text_color=self.color_scheme["text"]
        )
        self.stats_button.pack(side=tk.LEFT, padx=10, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self.color_analysis_button = ctk.CTkButton(
            self.toolbar,
            text="üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞",
            command=lambda: self.show_color_analysis(self.current_image_path) if hasattr(self, 'current_image_path') else messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            font=self.styles["button"],
            height=45,
            width=200,
            **self.button_effects["normal"],
            text_color=self.color_scheme["text"]
        )
        self.color_analysis_button.pack(side=tk.LEFT, padx=10, pady=5)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        title_frame = ctk.CTkFrame(
            self.main_container,
            fg_color=self.color_scheme["card_bg"],
            corner_radius=20
        )
        title_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.title_label = ctk.CTkLabel(
            title_frame,
            text="üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à–∞—Ö–º–∞—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä",
            font=self.styles["heading"],
            text_color=self.color_scheme["gradient_start"]
        )
        self.title_label.pack(pady=15)
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
        status_text = "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞" if self.model_loaded else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"
        status_color = self.color_scheme["success"] if self.model_loaded else self.color_scheme["error"]
        self.status_label = ctk.CTkLabel(
            self.main_container,
            text=status_text,
            text_color=status_color,
            font=self.styles["text"]
        )
        self.status_label.pack(pady=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ctk.CTkFrame(self.main_container)
        self.content_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        self.left_panel = ctk.CTkFrame(self.content_frame)
        self.left_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = ctk.CTkFrame(self.left_panel)
        self.image_frame.pack(pady=10, fill=tk.BOTH, expand=True)
        
        self.image_label = ctk.CTkLabel(
            self.image_frame,
            text="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            font=ctk.CTkFont(size=14)
        )
        self.image_label.pack(expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_frame = ctk.CTkFrame(self.left_panel)
        self.result_frame.pack(fill=tk.X, pady=10)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏—Å—Ç–æ—Ä–∏—è)
        self.right_panel = ctk.CTkFrame(self.content_frame)
        self.right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_label = ctk.CTkLabel(
            self.right_panel,
            text="–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.history_label.pack(pady=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.create_history_table()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.show_tooltip(self.upload_button, "–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\nCtrl+O")
        self.show_tooltip(self.stats_button, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π\nF5")
        self.show_tooltip(self.color_analysis_button, "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.upload_button.configure(command=lambda: [self.play_sound("click"), self.upload_image()])
        self.stats_button.configure(command=lambda: [self.play_sound("click"), self.show_statistics()])
    
    def create_history_table(self):
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.table_frame = ctk.CTkFrame(self.right_panel)
        self.table_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å —Ç–µ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
        style = ttk.Style()
        style.configure(
            "Treeview",
            background="#2a2d2e",
            foreground="white",
            fieldbackground="#2a2d2e",
            borderwidth=0
        )
        style.configure(
            "Treeview.Heading",
            background="#2a2d2e",
            foreground="white",
            borderwidth=1
        )
        
        columns = ("–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        self.history_tree = ttk.Treeview(
            self.table_frame,
            columns=columns,
            show="headings",
            style="Treeview"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in columns:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, width=120)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ctk.CTkScrollbar(
            self.table_frame,
            command=self.history_tree.yview
        )
        self.history_tree.configure(yscrollcommand=scrollbar.set)
        
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.load_history()
    
    def show_result(self, class_name, color, confidence):
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for widget in self.result_frame.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        class_card = ctk.CTkFrame(
            self.result_frame,
            fg_color=self.color_scheme["card_bg"],
            corner_radius=15,
            border_width=2,
            border_color=self.color_scheme["accent"]
        )
        class_card.pack(fill=tk.X, pady=10, padx=15)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
        icons = {
            "–§–µ—Ä–∑—å": "üëë",
            "–õ–∞–¥—å—è": "üè∞",
            "–°–ª–æ–Ω": "üêò",
            "–ö–æ–Ω—å": "üê¥",
            "–ü–µ—à–∫–∞": "‚ôüÔ∏è"
        }
        
        icon = next((v for k, v in icons.items() if k in class_name), "üéØ")
        
        ctk.CTkLabel(
            class_card,
            text=f"{icon} –¢–∏–ø —Ñ–∏–≥—É—Ä—ã:",
            font=self.styles["text"],
            text_color=self.color_scheme["gradient_start"]
        ).pack(pady=5)
        
        ctk.CTkLabel(
            class_card,
            text=class_name,
            font=self.styles["subheading"],
            text_color=self.color_scheme["accent"]
        ).pack(pady=5)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–∞
        color_card = ctk.CTkFrame(
            self.result_frame,
            fg_color=self.color_scheme["surface"],
            corner_radius=10
        )
        color_card.pack(fill=tk.X, pady=5, padx=10)
        
        ctk.CTkLabel(
            color_card,
            text="üé® –¶–≤–µ—Ç:",
            font=self.styles["text"],
            text_color=self.color_scheme["text"]
        ).pack()
        
        ctk.CTkLabel(
            color_card,
            text=color,
            font=self.styles["subheading"],
            text_color=self.color_scheme["accent"]
        ).pack()
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        conf_card = ctk.CTkFrame(
            self.result_frame,
            fg_color=self.color_scheme["surface"],
            corner_radius=10
        )
        conf_card.pack(fill=tk.X, pady=5, padx=10)
        
        ctk.CTkLabel(
            conf_card,
            text="üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:",
            font=self.styles["text"],
            text_color=self.color_scheme["text"]
        ).pack()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_value = float(confidence.strip('%'))
        confidence_color = (
            self.color_scheme["success"] if confidence_value > 80
            else self.color_scheme["warning"] if confidence_value > 50
            else self.color_scheme["error"]
        )
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        progress = ctk.CTkProgressBar(
            conf_card,
            progress_color=confidence_color,
            height=15,
            corner_radius=10
        )
        progress.pack(pady=10, padx=20, fill=tk.X)
        progress.set(confidence_value / 100)
    
    def display_image(self, file_path):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(file_path)
            img = self.resize_image(img, (300, 300))
            img_tk = ImageTk.PhotoImage(img)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            
            self.image_label = ctk.CTkLabel(
                self.image_frame,
                image=img_tk,
                text=""
            )
            self.image_label.image = img_tk
            self.image_label.pack(expand=True)
            
        except Exception as e:
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            self.image_label = ctk.CTkLabel(
                self.image_frame,
                text=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}",
                text_color="red"
            )
            self.image_label.pack(expand=True)
    
    def resize_image(self, img, size):
        width, height = img.size
        ratio = min(size[0]/width, size[1]/height)
        new_width = int(width * ratio)
        new_height = int(height * ratio)
        return img.resize((new_width, new_height), Image.LANCZOS)
    
    def detect_color(self, file_path):
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB
            img = Image.open(file_path).convert("RGB")
            arr = np.array(img)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            h, w, _ = arr.shape
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏ —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            cx, cy = w // 2, h // 2
            s = min(h, w) // 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
            
            # –í—ã—Ä–µ–∑–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            crop = arr[cy - s//2:cy + s//2, cx - s//2:cx + s//2]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞
            hsv = cv2.cvtColor(crop, cv2.COLOR_RGB2HSV)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å–∫—É —Ñ–∏–≥—É—Ä—ã
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã
            gray = cv2.cvtColor(crop, cv2.COLOR_RGB2GRAY)
            blur = cv2.GaussianBlur(gray, (5, 5), 0)
            thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                         cv2.THRESH_BINARY_INV, 11, 2)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if not contours:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç ‚ùî", 0
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç—É—Ä
            main_contour = max(contours, key=cv2.contourArea)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ñ–∏–≥—É—Ä—ã
            mask = np.zeros_like(gray)
            cv2.drawContours(mask, [main_contour], -1, 255, -1)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –º–∞—Å–∫–∏
            figure_pixels = hsv[mask > 0]
            
            if len(figure_pixels) == 0:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç ‚ùî", 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∏ —è—Ä–∫–æ—Å—Ç—å
            saturation = figure_pixels[:, 1]
            value = figure_pixels[:, 2]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            mean_saturation = np.mean(saturation)
            mean_value = np.mean(value)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —è—Ä–∫–æ—Å—Ç–∏
            if mean_value < 100:  # –¢–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
                return "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è", mean_value
            elif mean_value > 150 and mean_saturation < 50:  # –°–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é
                return "–ë–µ–ª–∞—è ‚ôô", mean_value
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                dark_ratio = np.sum(value < 127) / len(value)
                return "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è" if dark_ratio > 0.6 else "–ë–µ–ª–∞—è ‚ôô", mean_value
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞: {e}", 0

    def show_color_analysis(self, file_path):
        try:
            img = Image.open(file_path).convert("L")
            arr = np.array(img)
            h, w = arr.shape
            cx, cy = w // 2, h // 2
            s = min(h, w) // 3
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_window = ctk.CTkToplevel(self.root)
            analysis_window.title("–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä—ã")
            analysis_window.geometry("800x600")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            frame = ctk.CTkFrame(
                analysis_window,
                fg_color=self.color_scheme["card_bg"]
            )
            frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
            
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ax1.imshow(arr, cmap='gray')
            ax1.set_title("–û—Ä–∏–≥–∏–Ω–∞–ª")
            
            # –û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
            crop = arr[cy - s//2:cy + s//2, cx - s//2:cx + s//2]
            ax2.imshow(crop, cmap='gray')
            ax2.set_title("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            ax3.hist(crop.ravel(), bins=50, color=self.color_scheme["accent"])
            ax3.set_title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —è—Ä–∫–æ—Å—Ç–∏")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            for ax in [ax1, ax2, ax3]:
                ax.set_facecolor(self.color_scheme["surface"])
                ax.grid(True, alpha=0.3)
            fig.patch.set_facecolor(self.color_scheme["card_bg"])
            
            canvas = FigureCanvasTkAgg(fig, frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ
            color, mean = self.detect_color(file_path)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            threshold = 200
            figure_pixels = crop[crop < threshold]
            hist, _ = np.histogram(figure_pixels, bins=3)
            dark_pixels = np.sum(hist[:2])
            light_pixels = hist[2]
            std_dev = np.std(figure_pixels)
            dark_ratio = np.sum(figure_pixels < 127) / len(figure_pixels)
            
            info_text = f"""
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:
            
            üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç: {color}
            üìè –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å: {mean:.2f}
            üìê –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞: {s}x{s} –ø–∏–∫—Å–µ–ª–µ–π
            
            üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
            ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_dev:.2f}
            ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {dark_ratio:.2%}
            ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {dark_pixels}
            ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {light_pixels}
            """
            
            info_label = ctk.CTkLabel(
                frame,
                text=info_text,
                font=self.styles["text"],
                justify="left",
                fg_color=self.color_scheme["surface"],
                corner_radius=10,
                padx=20,
                pady=20
            )
            info_label.pack(pady=10, padx=10, fill=tk.X)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑: {e}")
    
    def classify_image(self, file_path):
        try:
            fig_color, _ = self.detect_color(file_path)
            
            img = image.load_img(file_path, target_size=(224, 224))
            x = image.img_to_array(img)
            x = np.expand_dims(x, axis=0) / 255.0
            
            prediction = self.model.predict(x)[0]
            idx = np.argmax(prediction)
            confidence = float(np.max(prediction)) * 100
            predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]
            
            self.show_result(predicted_class, fig_color, f"{confidence:.1f}%")
            self.save_to_history(
                os.path.basename(file_path),
                predicted_class,
                fig_color,
                f"{confidence:.1f}%"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats(predicted_class, fig_color)
            
        except Exception as e:
            self.show_result("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "0%")
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def upload_image(self):
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=[
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if not file_paths:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_window = ctk.CTkToplevel(self.root)
        images_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        images_window.geometry("800x600")
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = ctk.CTkCanvas(images_window)
        scrollbar = ttk.Scrollbar(images_window, orient="vertical", command=canvas.yview)
        scrollable_frame = ctk.CTkFrame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for file_path in file_paths:
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            img_frame = ctk.CTkFrame(scrollable_frame)
            img_frame.pack(pady=10, padx=10, fill="x")
            
            try:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(file_path)
                img = self.resize_image(img, (200, 200))
                img_tk = ImageTk.PhotoImage(img)
                
                img_label = ctk.CTkLabel(
                    img_frame,
                    image=img_tk,
                    text=""
                )
                img_label.image = img_tk
                img_label.pack(side="left", padx=10)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results_frame = ctk.CTkFrame(img_frame)
                results_frame.pack(side="left", fill="both", expand=True, padx=10)
                
                # –ò–º—è —Ñ–∞–π–ª–∞
                file_name = os.path.basename(file_path)
                ctk.CTkLabel(
                    results_frame,
                    text=f"–§–∞–π–ª: {file_name}",
                    font=ctk.CTkFont(size=12)
                ).pack(anchor="w")
                
                if self.model_loaded:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä—ã
                    fig_color, _ = self.detect_color(file_path)
                    
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_tensor = image.load_img(file_path, target_size=(224, 224))
                    x = image.img_to_array(img_tensor)
                    x = np.expand_dims(x, axis=0) / 255.0
                    
                    prediction = self.model.predict(x, verbose=0)[0]
                    idx = np.argmax(prediction)
                    confidence = float(np.max(prediction)) * 100
                    predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    ctk.CTkLabel(
                        results_frame,
                        text=f"–¢–∏–ø —Ñ–∏–≥—É—Ä—ã: {predicted_class}",
                        font=ctk.CTkFont(size=12)
                    ).pack(anchor="w")
                    
                    ctk.CTkLabel(
                        results_frame,
                        text=f"–¶–≤–µ—Ç: {fig_color}",
                        font=ctk.CTkFont(size=12)
                    ).pack(anchor="w")
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    conf_frame = ctk.CTkFrame(results_frame)
                    conf_frame.pack(fill="x", pady=5)
                    
                    ctk.CTkLabel(
                        conf_frame,
                        text=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%",
                        font=ctk.CTkFont(size=12)
                    ).pack(side="left")
                    
                    progress = ctk.CTkProgressBar(conf_frame, width=100)
                    progress.pack(side="left", padx=10)
                    progress.set(confidence / 100)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.save_to_history(file_name, predicted_class, fig_color, f"{confidence:.1f}%")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.update_stats(predicted_class, fig_color)
                    
                else:
                    ctk.CTkLabel(
                        results_frame,
                        text="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                        text_color="red",
                        font=ctk.CTkFont(size=12)
                    ).pack()
                
            except Exception as e:
                ctk.CTkLabel(
                    img_frame,
                    text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_name}:\n{str(e)}",
                    text_color="red",
                    font=ctk.CTkFont(size=12)
                ).pack()
    
    def load_history(self):
        if os.path.exists(self.log_file):
            try:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —á—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
                df_log = pd.read_csv(self.log_file, encoding='utf-8')
                
                # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for _, row in df_log.iterrows():
                    self.history_tree.insert("", tk.END, values=(
                        row.get("–§–∞–π–ª", ""),
                        row.get("–ö–ª–∞—Å—Å", ""),
                        row.get("–¶–≤–µ—Ç", ""),
                        row.get("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "")
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def save_to_history(self, file_name, class_name, color, confidence):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.history_tree.insert("", 0, values=(file_name, class_name, color, confidence))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        new_entry = pd.DataFrame([{
            "–§–∞–π–ª": file_name,
            "–ö–ª–∞—Å—Å": class_name,
            "–¶–≤–µ—Ç": color,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": confidence
        }])
        
        if os.path.exists(self.log_file):
            try:
                current = pd.read_csv(self.log_file, encoding='utf-8')
                if set(current.columns) == set(new_entry.columns):
                    new_entry.to_csv(self.log_file, mode='a', index=False, header=False, encoding='utf-8-sig')
                else:
                    new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
            except:
                new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
        else:
            new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
    
    def process_image(self, file_path):
        self.current_image_path = file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        self.display_image(file_path)
        if self.model_loaded:
            self.classify_image(file_path)
    
    def export_history(self):
        if not os.path.exists(self.log_file):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[
                ("Excel —Ñ–∞–π–ª", "*.xlsx"),
                ("CSV —Ñ–∞–π–ª", "*.csv"),
                ("JSON —Ñ–∞–π–ª", "*.json")
            ]
        )
        
        if not file_path:
            return
            
        df = pd.read_csv(self.log_file, encoding='utf-8')
        
        if file_path.endswith('.xlsx'):
            df.to_excel(file_path, index=False)
        elif file_path.endswith('.csv'):
            df.to_csv(file_path, index=False)
        elif file_path.endswith('.json'):
            df.to_json(file_path, orient='records', force_ascii=False)
            
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def show_statistics(self):
        stats_window = ctk.CTkToplevel(self.root)
        stats_window.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")
        stats_window.geometry("800x600")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        notebook = ttk.Notebook(stats_window)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        general_frame = ctk.CTkFrame(notebook)
        notebook.add(general_frame, text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        total_label = ctk.CTkLabel(
            general_frame,
            text=f"–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {self.stats['total_classifications']}",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        total_label.pack(pady=20)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
        fig1, ax1 = plt.subplots(figsize=(8, 4))
        classes = list(self.stats['by_class'].keys())
        values = list(self.stats['by_class'].values())
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        cleaned_classes = [name.split(' ')[0] for name in classes]
        ax1.bar(cleaned_classes, values)
        ax1.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º —Ñ–∏–≥—É—Ä")
        ax1.tick_params(axis='x', rotation=45)
        
        canvas1 = FigureCanvasTkAgg(fig1, general_frame)
        canvas1.draw()
        canvas1.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º
        fig2, ax2 = plt.subplots(figsize=(8, 4))
        colors = list(self.stats['by_color'].keys())
        color_values = list(self.stats['by_color'].values())
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        cleaned_colors = [name.split(' ')[0] for name in colors]
        ax2.pie(color_values, labels=cleaned_colors, autopct='%1.1f%%')
        ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç–∞–º")
        
        canvas2 = FigureCanvasTkAgg(fig2, general_frame)
        canvas2.draw()
        canvas2.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def reset_statistics(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?"):
            self.stats = {
                "total_classifications": 0,
                "by_class": {},
                "by_color": {"–ë–µ–ª–∞—è ‚ôô": 0, "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è": 0}
            }
            self.save_stats()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def load_stats(self):
        try:
            if os.path.exists('stats.json'):
                with open('stats.json', 'r', encoding='utf-8') as f:
                    self.stats = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def save_stats(self):
        try:
            with open('stats.json', 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def update_stats(self, class_name, color):
        self.stats['total_classifications'] += 1
        
        if class_name not in self.stats['by_class']:
            self.stats['by_class'][class_name] = 0
        self.stats['by_class'][class_name] += 1
        
        if color in self.stats['by_color']:
            self.stats['by_color'][color] += 1
            
        self.save_stats()

    def add_tooltips(self):
        Hovertip(self.upload_button, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        Hovertip(self.stats_button, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")
        Hovertip(self.color_analysis_button, "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä—ã")

    def batch_process(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ toolbar
        self.batch_button = ctk.CTkButton(
            self.toolbar,
            text="–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            command=self.open_batch_window,
            font=ctk.CTkFont(size=14),
            height=40,
            width=200
        )
        self.batch_button.pack(side=tk.LEFT, padx=5)

    def open_batch_window(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        if folder:
            image_files = [
                os.path.join(folder, f) for f in os.listdir(folder)
                if f.lower().endswith(('.png', '.jpg', '.jpeg'))
            ]

            if not image_files:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPG, PNG)")
                return

            total_files = len(image_files)

            progress_window = ctk.CTkToplevel(self.root)
            progress_window.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            progress_window.geometry("400x200")
            progress_window.transient(self.root) # –°–¥–µ–ª–∞—Ç—å –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
            
            progress_label = ctk.CTkLabel(
                progress_window,
                text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... 0/{total_files}",
                font=ctk.CTkFont(size=14)
            )
            progress_label.pack(pady=20)
            
            progress_bar = ctk.CTkProgressBar(progress_window)
            progress_bar.pack(pady=10, padx=20, fill=tk.X)
            progress_bar.set(0)

            processed_count = 0

            def process_batch():
                nonlocal processed_count
                results = []
                for i, file_path in enumerate(image_files):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_image –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                        # –û–¥–Ω–∞–∫–æ, process_image –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π GUI, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        # –ü–æ—ç—Ç–æ–º—É —Å–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—é–¥–∞ –∏–ª–∏ –≤—ã–Ω–µ—Å–µ–º –µ—ë
                        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        fig_color, _ = self.detect_color(file_path)

                        if self.model_loaded:
                            img_tensor = image.load_img(file_path, target_size=(224, 224))
                            x = image.img_to_array(img_tensor)
                            x = np.expand_dims(x, axis=0) / 255.0

                            prediction = self.model.predict(x, verbose=0)[0]
                            idx = np.argmax(prediction)
                            confidence = float(np.max(prediction)) * 100
                            predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]

                            results.append({
                                "–§–∞–π–ª": os.path.basename(file_path),
                                "–ö–ª–∞—Å—Å": predicted_class,
                                "–¶–≤–µ—Ç": fig_color,
                                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.1f}%"
                            })

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Tkinter)
                            self.root.after(0, self.update_stats, predicted_class, fig_color)
                            self.root.after(0, self.save_to_history, os.path.basename(file_path), predicted_class, fig_color, f"{confidence:.1f}%")

                        else:
                            results.append({
                                "–§–∞–π–ª": os.path.basename(file_path),
                                "–ö–ª–∞—Å—Å": "–û—à–∏–±–∫–∞",
                                "–¶–≤–µ—Ç": "–û—à–∏–±–∫–∞",
                                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "0%"
                            })

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                        results.append({
                             "–§–∞–π–ª": os.path.basename(file_path),
                             "–ö–ª–∞—Å—Å": "–û—à–∏–±–∫–∞",
                             "–¶–≤–µ—Ç": "–û—à–∏–±–∫–∞",
                             "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "0%"
                        })

                    processed_count += 1
                    progress = processed_count / total_files
                    # –û–±–Ω–æ–≤–ª—è–µ–º GUI (–Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Tkinter)
                    self.root.after(0, progress_bar.set, progress)
                    self.root.after(0, progress_label.configure, text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... {processed_count}/{total_files}")


                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.root.after(0, progress_window.destroy)
                self.root.after(0, self.show_batch_results, results) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ


            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞–ª GUI
            threading.Thread(target=process_batch).start()

    def show_batch_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ."""
        results_window = ctk.CTkToplevel(self.root)
        results_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        results_window.geometry("600x400")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        table_frame = ctk.CTkFrame(results_window)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        style = ttk.Style()
        style.configure(
            "Batch.Treeview",
            background="#2a2d2e",
            foreground="white",
            fieldbackground="#2a2d2e",
            borderwidth=0
        )
        style.configure(
            "Batch.Treeview.Heading",
            background="#2a2d2e",
            foreground="white",
            borderwidth=1
        )

        columns = ("–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        results_tree = ttk.Treeview(
            table_frame,
            columns=columns,
            show="headings",
            style="Batch.Treeview"
        )

        for col in columns:
            results_tree.heading(col, text=col)
            results_tree.column(col, width=120)

        scrollbar = ctk.CTkScrollbar(
            table_frame,
            command=results_tree.yview
        )
        results_tree.configure(yscrollcommand=scrollbar.set)

        results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for row in results:
            results_tree.insert("", tk.END, values=(
                row["–§–∞–π–ª"],
                row["–ö–ª–∞—Å—Å"],
                row["–¶–≤–µ—Ç"],
                row["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ctk.CTkButton(
            results_window,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=results_window.destroy
        )
        close_button.pack(pady=10)

    def add_settings(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ toolbar —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.settings_button = ctk.CTkButton(
            self.toolbar,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.open_settings,
            font=self.styles["button"],
            height=40,
            width=200,
            fg_color=self.color_scheme["primary"],
            hover_color=self.color_scheme["accent"]
        )
        self.settings_button.pack(side=tk.LEFT, padx=5)

    def open_settings(self):
        settings_window = ctk.CTkToplevel(self.root)
        settings_window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("600x500")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        settings_container = ctk.CTkFrame(
            settings_window,
            fg_color=self.color_scheme["background"],
            corner_radius=20
        )
        settings_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ctk.CTkLabel(
            settings_container,
            text="üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            font=self.styles["heading"],
            text_color=self.color_scheme["gradient_start"]
        ).pack(pady=20)
        
        # –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        themes_frame = ctk.CTkFrame(
            settings_container,
            fg_color=self.color_scheme["card_bg"],
            corner_radius=15
        )
        themes_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ctk.CTkLabel(
            themes_frame,
            text="üé≠ –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
            font=self.styles["subheading"],
            text_color=self.color_scheme["text"]
        ).pack(pady=10)
        
        theme_var = tk.StringVar(value="dark")
        for theme in ["–¢—ë–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"]:
            ctk.CTkRadioButton(
                themes_frame,
                text=theme,
                variable=theme_var,
                value=theme.lower(),
                font=self.styles["text"],
                fg_color=self.color_scheme["accent"],
                border_color=self.color_scheme["primary"],
                hover_color=self.color_scheme["button_hover"]
            ).pack(pady=5)

    def compare_images(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ toolbar
        self.compare_button = ctk.CTkButton(
            self.toolbar,
            text="–°—Ä–∞–≤–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            command=self.open_compare_window,
            font=ctk.CTkFont(size=14),
            height=40,
            width=200
        )
        self.compare_button.pack(side=tk.LEFT, padx=5)

    def open_compare_window(self):
        compare_window = ctk.CTkToplevel(self.root)
        compare_window.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        compare_window.geometry("1000x600")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_frame = ctk.CTkFrame(compare_window)
        images_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        upload_btn = ctk.CTkButton(
            images_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            command=lambda: self.add_image_to_compare(images_frame)
        )
        upload_btn.pack(pady=10)

    def add_image_to_compare(self, frame):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_path:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                img_frame = ctk.CTkFrame(frame)
                img_frame.pack(side=tk.LEFT, padx=10, fill=tk.BOTH, expand=True)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(file_path)
                img = self.resize_image(img, (200, 200))
                img_tk = ImageTk.PhotoImage(img)
                
                img_label = ctk.CTkLabel(
                    img_frame,
                    image=img_tk,
                    text=""
                )
                img_label.image = img_tk
                img_label.pack(pady=5)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if self.model_loaded:
                    img_tensor = image.load_img(file_path, target_size=(224, 224))
                    x = image.img_to_array(img_tensor)
                    x = np.expand_dims(x, axis=0) / 255.0
                    
                    prediction = self.model.predict(x, verbose=0)[0]
                    idx = np.argmax(prediction)
                    confidence = float(np.max(prediction)) * 100
                    predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    result_label = ctk.CTkLabel(
                        img_frame,
                        text=f"–ö–ª–∞—Å—Å: {predicted_class}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%",
                        font=ctk.CTkFont(size=12)
                    )
                    result_label.pack(pady=5)
                    
            except Exception as e:
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{str(e)}"
                )

    def show_loading_screen(self):
        loading_window = ctk.CTkToplevel(self.root)
        loading_window.title("–ó–∞–≥—Ä—É–∑–∫–∞")
        loading_window.geometry("300x200")
        loading_window.transient(self.root)
        
        loading_frame = ctk.CTkFrame(
            loading_window,
            fg_color=self.color_scheme["card_bg"]
        )
        loading_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        loading_label = ctk.CTkLabel(
            loading_frame,
            text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...",
            font=self.styles["heading"],
            text_color=self.color_scheme["gradient_start"]
        )
        loading_label.pack(pady=20)
        
        progress = ctk.CTkProgressBar(
            loading_frame,
            mode="indeterminate",
            height=15,
            corner_radius=10
        )
        progress.pack(pady=10, padx=20, fill=tk.X)
        progress.start()
        
        return loading_window

    def add_sound_effects(self):
        self.sounds = {
            "success": lambda: print("\a"),  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
            "error": lambda: print("\a\a"),  # –î–≤–æ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
            "click": lambda: print("\a")     # –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
        }

    def play_sound(self, sound_type):
        if hasattr(self, "sounds") and sound_type in self.sounds:
            self.sounds[sound_type]()

    def setup_hotkeys(self):
        self.root.bind("<Control-o>", lambda e: self.upload_image())
        self.root.bind("<Control-s>", lambda e: self.export_history())
        self.root.bind("<Control-q>", lambda e: self.root.quit())
        self.root.bind("<F1>", lambda e: self.show_help())
        self.root.bind("<F5>", lambda e: self.refresh_history())

    def show_tooltip(self, widget, text):
        tooltip = ctk.CTkToplevel(self.root)
        tooltip.withdraw()
        tooltip.overrideredirect(True)
        
        label = ctk.CTkLabel(
            tooltip,
            text=text,
            font=self.styles["small"],
            fg_color=self.color_scheme["surface"],
            corner_radius=10,
            padx=10,
            pady=5
        )
        label.pack()
        
        def show(event):
            x = widget.winfo_rootx() + widget.winfo_width()
            y = widget.winfo_rooty()
            tooltip.geometry(f"+{x}+{y}")
            tooltip.deiconify()
        
        def hide(event):
            tooltip.withdraw()
        
        widget.bind("<Enter>", show)
        widget.bind("<Leave>", hide)

    def animate_window(self, window, start_geometry, end_geometry):
        def update_geometry(progress):
            if not window.winfo_exists():
                return
            
            current_geometry = ""
            for start, end in zip(
                start_geometry.split("+"),
                end_geometry.split("+")
            ):
                if "x" in start:
                    w_start, h_start = map(int, start.split("x"))
                    w_end, h_end = map(int, end.split("x"))
                    w = int(w_start + (w_end - w_start) * progress)
                    h = int(h_start + (h_end - h_start) * progress)
                    current_geometry += f"{w}x{h}"
                else:
                    pos_start = int(start)
                    pos_end = int(end)
                    pos = int(pos_start + (pos_end - pos_start) * progress)
                    current_geometry += f"+{pos}"
            
            window.geometry(current_geometry)
            
            if progress < 1:
                window.after(10, lambda: update_geometry(min(1, progress + 0.1)))
        
        update_geometry(0)

    def setup_drag_and_drop(self):
        def drop(event):
            try:
                file_path = event.data
                if file_path.startswith("{"):
                    file_path = file_path[1:-1]
                if os.path.isfile(file_path) and any(file_path.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png']):
                    self.process_image(file_path)
                    self.play_sound("success")
                else:
                    self.play_sound("error")
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)")
            except Exception as e:
                self.play_sound("error")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{str(e)}")
        
        try:
            self.root.drop_target_register(DND_FILES)
            self.root.dnd_bind("<<Drop>>", drop)
        except:
            print("Drag and Drop –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

    def check_for_updates(self):
        update_window = ctk.CTkToplevel(self.root)
        update_window.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        update_window.geometry("400x200")
        
        update_label = ctk.CTkLabel(
            update_window,
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...",
            font=self.styles["heading"]
        )
        update_label.pack(pady=20)
        
        progress = ctk.CTkProgressBar(
            update_window,
            mode="indeterminate"
        )
        progress.pack(pady=10)
        progress.start()
        
        def show_update_result():
            progress.stop()
            update_label.configure(text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
            update_window.after(2000, update_window.destroy)
        
        update_window.after(2000, show_update_result)

    def show_help(self):
        help_window = ctk.CTkToplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞")
        help_window.geometry("600x400")
        
        help_frame = ctk.CTkFrame(
            help_window,
            fg_color=self.color_scheme["card_bg"]
        )
        help_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        help_text = """
        üéØ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
        
        Ctrl + O - –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Ctrl + S - –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
        Ctrl + Q - –í—ã—Ö–æ–¥
        F1      - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        F5      - –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        
        üìù –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        
        ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
        ‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —à–∞—Ö–º–∞—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä
        ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–∏–≥—É—Ä
        ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
        
        ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG
        ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ–º–Ω–∞—è –∏ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º—ã
        """
        
        ctk.CTkLabel(
            help_frame,
            text=help_text,
            font=self.styles["text"],
            justify="left"
        ).pack(pady=20)

    def refresh_history(self):
        loading = self.show_loading_screen()
        self.root.after(100, lambda: self.load_history())
        self.root.after(500, loading.destroy)
        self.play_sound("success")

if __name__ == "__main__":
    root = ctk.CTk()
    app = ChessClassifierApp(root)
    root.mainloop() 


    #python chess_classifier_gui.py