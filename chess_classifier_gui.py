import tkinter as tk
import customtkinter as ctk
from tkinter import filedialog
from PIL import Image, ImageTk
import numpy as np
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import pandas as pd
from datetime import datetime

class ChessClassifierApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Chess Piece Classifier Pro")
        self.root.geometry("1000x800")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        try:
            self.model = load_model("chess_model_updated.keras")
            self.model_loaded = True
        except Exception as e:
            self.model = None
            self.model_loaded = False
        
        # –ö–ª–∞—Å—Å—ã —Ñ–∏–≥—É—Ä
        self.class_labels = {
            'Queen-Resized': '–§–µ—Ä–∑—å üëë',
            'Rook-resize': '–õ–∞–¥—å—è üè∞',
            'bishop_resized': '–°–ª–æ–Ω üêò',
            'knight-resize': '–ö–æ–Ω—å üê¥',
            'pawn_resized': '–ü–µ—à–∫–∞ üßç‚Äç‚ôÇÔ∏è'
        }
        
        self.log_file = "predictions_log.csv"
        self.create_widgets()
        
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ctk.CTkFrame(self.root)
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.main_container,
            text="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à–∞—Ö–º–∞—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.title_label.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        status_text = "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞" if self.model_loaded else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"
        status_color = "green" if self.model_loaded else "red"
        self.status_label = ctk.CTkLabel(
            self.main_container,
            text=status_text,
            text_color=status_color,
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(pady=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ctk.CTkFrame(self.main_container)
        self.content_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        self.left_panel = ctk.CTkFrame(self.content_frame)
        self.left_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.upload_button = ctk.CTkButton(
            self.left_panel,
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            command=self.upload_image,
            font=ctk.CTkFont(size=14),
            height=40
        )
        self.upload_button.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = ctk.CTkFrame(self.left_panel)
        self.image_frame.pack(pady=10, fill=tk.BOTH, expand=True)
        
        self.image_label = ctk.CTkLabel(
            self.image_frame,
            text="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            font=ctk.CTkFont(size=14)
        )
        self.image_label.pack(expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_frame = ctk.CTkFrame(self.left_panel)
        self.result_frame.pack(fill=tk.X, pady=10)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏—Å—Ç–æ—Ä–∏—è)
        self.right_panel = ctk.CTkFrame(self.content_frame)
        self.right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_label = ctk.CTkLabel(
            self.right_panel,
            text="–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.history_label.pack(pady=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.create_history_table()
        
    def create_history_table(self):
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.table_frame = ctk.CTkFrame(self.right_panel)
        self.table_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å —Ç–µ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
        style = ttk.Style()
        style.configure(
            "Treeview",
            background="#2a2d2e",
            foreground="white",
            fieldbackground="#2a2d2e",
            borderwidth=0
        )
        style.configure(
            "Treeview.Heading",
            background="#2a2d2e",
            foreground="white",
            borderwidth=1
        )
        
        columns = ("–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        self.history_tree = ttk.Treeview(
            self.table_frame,
            columns=columns,
            show="headings",
            style="Treeview"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in columns:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, width=120)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ctk.CTkScrollbar(
            self.table_frame,
            command=self.history_tree.yview
        )
        self.history_tree.configure(yscrollcommand=scrollbar.set)
        
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.load_history()
    
    def show_result(self, class_name, color, confidence):
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for widget in self.result_frame.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        class_card = ctk.CTkFrame(self.result_frame)
        class_card.pack(fill=tk.X, pady=5, padx=10)
        
        ctk.CTkLabel(
            class_card,
            text="–¢–∏–ø —Ñ–∏–≥—É—Ä—ã:",
            font=ctk.CTkFont(size=12)
        ).pack()
        
        ctk.CTkLabel(
            class_card,
            text=class_name,
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack()
        
        color_card = ctk.CTkFrame(self.result_frame)
        color_card.pack(fill=tk.X, pady=5, padx=10)
        
        ctk.CTkLabel(
            color_card,
            text="–¶–≤–µ—Ç:",
            font=ctk.CTkFont(size=12)
        ).pack()
        
        ctk.CTkLabel(
            color_card,
            text=color,
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack()
        
        conf_card = ctk.CTkFrame(self.result_frame)
        conf_card.pack(fill=tk.X, pady=5, padx=10)
        
        ctk.CTkLabel(
            conf_card,
            text="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:",
            font=ctk.CTkFont(size=12)
        ).pack()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_value = float(confidence.strip('%'))
        progress = ctk.CTkProgressBar(conf_card)
        progress.pack(pady=5)
        progress.set(confidence_value / 100)
        
        ctk.CTkLabel(
            conf_card,
            text=f"{confidence_value:.1f}%",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack()
    
    def display_image(self, file_path):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(file_path)
            img = self.resize_image(img, (300, 300))
            img_tk = ImageTk.PhotoImage(img)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            
            self.image_label = ctk.CTkLabel(
                self.image_frame,
                image=img_tk,
                text=""
            )
            self.image_label.image = img_tk
            self.image_label.pack(expand=True)
            
        except Exception as e:
            if hasattr(self, "image_label"):
                self.image_label.destroy()
            self.image_label = ctk.CTkLabel(
                self.image_frame,
                text=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}",
                text_color="red"
            )
            self.image_label.pack(expand=True)
    
    def resize_image(self, img, size):
        width, height = img.size
        ratio = min(size[0]/width, size[1]/height)
        new_width = int(width * ratio)
        new_height = int(height * ratio)
        return img.resize((new_width, new_height), Image.LANCZOS)
    
    def detect_color(self, file_path):
        try:
            img = Image.open(file_path).convert("L")
            arr = np.array(img)
            h, w = arr.shape
            cx, cy = w // 2, h // 2
            s = min(h, w) // 2
            crop = arr[cy - s//2:cy + s//2, cx - s//2:cx + s//2]
            crop_valid = crop[crop < 240]
            
            if len(crop_valid) == 0:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç ‚ùî", 0
            
            mean = np.mean(crop_valid)
            color = "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è" if mean < 127 else "–ë–µ–ª–∞—è ‚ôô"
            return color, mean
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞: {e}", 0
    
    def classify_image(self, file_path):
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            fig_color, _ = self.detect_color(file_path)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            img = image.load_img(file_path, target_size=(224, 224))
            x = image.img_to_array(img)
            x = np.expand_dims(x, axis=0) / 255.0
            
            prediction = self.model.predict(x)[0]
            idx = np.argmax(prediction)
            confidence = float(np.max(prediction)) * 100
            predicted_class = self.class_labels[list(self.class_labels.keys())[idx]]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.show_result(predicted_class, fig_color, f"{confidence:.1f}%")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(
                os.path.basename(file_path),
                predicted_class,
                fig_color,
                f"{confidence:.1f}%"
            )
            
        except Exception as e:
            self.show_result("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "0%")
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def upload_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )
        
        if file_path:
            self.display_image(file_path)
            if self.model_loaded:
                self.classify_image(file_path)
    
    def load_history(self):
        if os.path.exists(self.log_file):
            try:
                df_log = pd.read_csv(self.log_file, encoding='utf-8', errors='replace')
                
                # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                for item in self.history_tree.get_children():
                    self.history_tree.delete(item)
                
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for _, row in df_log.iterrows():
                    self.history_tree.insert("", tk.END, values=(
                        row.get("–§–∞–π–ª", ""),
                        row.get("–ö–ª–∞—Å—Å", ""),
                        row.get("–¶–≤–µ—Ç", ""),
                        row.get("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "")
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def save_to_history(self, file_name, class_name, color, confidence):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.history_tree.insert("", 0, values=(file_name, class_name, color, confidence))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        new_entry = pd.DataFrame([{
            "–§–∞–π–ª": file_name,
            "–ö–ª–∞—Å—Å": class_name,
            "–¶–≤–µ—Ç": color,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": confidence
        }])
        
        if os.path.exists(self.log_file):
            try:
                current = pd.read_csv(self.log_file, encoding='utf-8')
                if set(current.columns) == set(new_entry.columns):
                    new_entry.to_csv(self.log_file, mode='a', index=False, header=False, encoding='utf-8-sig')
                else:
                    new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
            except:
                new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')
        else:
            new_entry.to_csv(self.log_file, index=False, encoding='utf-8-sig')

if __name__ == "__main__":
    root = ctk.CTk()
    app = ChessClassifierApp(root)
    root.mainloop() 