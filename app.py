import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import numpy as np
import pandas as pd
import os
from datetime import datetime
import matplotlib.pyplot as plt
import csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ —Ü–≤–µ—Ç–æ–≤
st.set_page_config(page_title="Chess Classifier Pro", page_icon="‚ôüÔ∏è", layout="centered")

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
    .main {
        background-color: #f5f5f5;
    }
    .stTitle {
        color: #2c3e50;
    }
    .stSubheader {
        color: #34495e;
    }
    .stSuccess {
        background-color: #d4edda;
        color: #155724;
    }
    .stInfo {
        background-color: #cce5ff;
        color: #004085;
    }
    .stWarning {
        background-color: #fff3cd;
        color: #856404;
    }
    .stError {
        background-color: #f8d7da;
        color: #721c24;
    }
    </style>
    """, unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
plt.rcParams['figure.facecolor'] = '#f5f5f5'
plt.rcParams['axes.facecolor'] = '#ffffff'
plt.rcParams['axes.edgecolor'] = '#2c3e50'
plt.rcParams['text.color'] = '#2c3e50'
plt.rcParams['axes.labelcolor'] = '#2c3e50'

print(plt.style.available)

st.title("üß†‚ôüÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π —Ñ–∏–≥—É—Ä—ã ‚Äî Pro-–≤–µ—Ä—Å–∏—è")

# –ú–æ–¥–µ–ª—å –∏ –∫–ª–∞—Å—Å—ã
model = load_model("final_model.h5")
class_labels = {
    'bishop': '–°–ª–æ–Ω üêò',
    'knight': '–ö–æ–Ω—å üê¥',
    'pawn': '–ü–µ—à–∫–∞ üßç‚Äç‚ôÇÔ∏è',
    'queen': '–§–µ—Ä–∑—å üëë',
    'rook': '–õ–∞–¥—å—è üè∞'
}
log_file = "predictions_log.csv"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω
if not os.path.exists(log_file):
    with open(log_file, 'w', encoding='utf-8-sig', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"])
else:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    try:
        with open(log_file, 'r', encoding='utf-8-sig') as f:
            reader = csv.reader(f)
            headers = next(reader)
            if headers != ["–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]:
                raise ValueError
    except Exception:
        with open(log_file, 'w', encoding='utf-8-sig', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"])

# üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –∫—Ä–æ–ø–∞
def detect_color_preview(uploaded_file):
    st.write("‚úÖ detect_color_preview –í–´–ó–í–ê–ù–ê")
    try:
        img = Image.open(uploaded_file).convert("L")
        st.write("üñºÔ∏è –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ PIL, —Ä–∞–∑–º–µ—Ä:", img.size)
        arr = np.array(img)
        h, w = arr.shape
        cx, cy = w // 2, h // 2
        s = min(h, w) // 2
        crop = arr[cy - s//2:cy + s//2, cx - s//2:cx + s//2]
        crop_preview = Image.fromarray(crop)
        crop_valid = crop[crop < 240]

        if len(crop_valid) == 0:
            st.warning("‚ö†Ô∏è –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª—ã–π. –¶–≤–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç ‚ùî", 0, crop_preview

        mean = np.mean(crop_valid)
        color = "–ß—ë—Ä–Ω–∞—è ‚ôüÔ∏è" if mean < 127 else "–ë–µ–ª–∞—è ‚ôô"
        return color, mean, crop_preview
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        return "–û—à–∏–±–∫–∞ ‚ùå", 0, None

# üßæ –ò—Å—Ç–æ—Ä–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
if os.path.exists(log_file):
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = ['utf-8-sig', 'utf-8', 'cp1251']
        df_log = None
        
        for encoding in encodings:
            try:
                df_log = pd.read_csv(log_file, encoding=encoding)
                break
            except UnicodeDecodeError:
                continue
        
        if df_log is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ["–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]
        missing_columns = [col for col in required_columns if col not in df_log.columns]
        
        if missing_columns:
            # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            for col in missing_columns:
                df_log[col] = "‚Äî"
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        color_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É", options=["–í—Å–µ", "–ß—ë—Ä–Ω–∞—è", "–ë–µ–ª–∞—è"])
        class_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É", options=["–í—Å–µ"] + list(class_labels.values()))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if color_filter != "–í—Å–µ":
            df_log = df_log[df_log["–¶–≤–µ—Ç"].str.contains(color_filter, na=False)]
        
        if class_filter != "–í—Å–µ":
            df_log = df_log[df_log["–ö–ª–∞—Å—Å"] == class_filter]
        
        if not df_log.empty:
            st.dataframe(df_log.tail(5), use_container_width=True)
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —á—Ç–µ–Ω–∏–µ–º –ª–æ–≥–∞: {str(e)}")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞
        with open(log_file, 'w', encoding='utf-8-sig', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["–§–∞–π–ª", "–ö–ª–∞—Å—Å", "–¶–≤–µ—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"])

# üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–≥—É—Ä", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

if uploaded_files:
    predictions = []
    
    for uploaded_file in uploaded_files:
        st.image(uploaded_file, caption=f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_file.name}", use_container_width=True)

        st.write("üß™ –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ detect_color_preview")
        fig_color, brightness, center_crop = detect_color_preview(uploaded_file)

        if center_crop:
            st.image(center_crop, caption=f"üîç –¶–µ–Ω—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞ (—è—Ä–∫–æ—Å—Ç—å: {brightness:.2f})", use_container_width=True)

        color_emoji = "‚ö´Ô∏è" if "–ß—ë—Ä–Ω–∞—è" in fig_color else "‚ö™Ô∏è" if "–ë–µ–ª–∞—è" in fig_color else "‚ùî"
        st.markdown(f"### {color_emoji} –¶–≤–µ—Ç —Ñ–∏–≥—É—Ä—ã: **{fig_color}**")

        img = image.load_img(uploaded_file, target_size=(224, 224))
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0) / 255.0

        prediction = model.predict(x)[0]
        idx = np.argmax(prediction)
        confidence = float(np.max(prediction)) * 100
        predicted_class = class_labels[list(class_labels.keys())[idx]]

        # –¢–æ–ø-3 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        top3_idx = np.argsort(prediction)[::-1][:3]
        top3_labels = [list(class_labels.values())[i] for i in top3_idx]
        top3_probs = [prediction[i]*100 for i in top3_idx]
        st.info("–¢–æ–ø-3 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        for label, prob in zip(top3_labels, top3_probs):
            st.write(f"{label}: {prob:.2f}%")

        st.success(f"üü¢ –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞: **{predicted_class}**, —Ü–≤–µ—Ç: **{fig_color}**, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{confidence:.2f}%**")

        # üìä –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        st.subheader("üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º")
        fig, ax = plt.subplots()
        ax.bar(class_labels.values(), prediction * 100)
        ax.set_ylabel('%')
        ax.set_title('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏')
        st.pyplot(fig)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
        predictions.append({
            "–§–∞–π–ª": uploaded_file.name,
            "–ö–ª–∞—Å—Å": predicted_class,
            "–¶–≤–µ—Ç": fig_color,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.2f}%"
        })

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    for pred in predictions:
        st.write(f"–§–∞–π–ª: {pred['–§–∞–π–ª']} ‚Äî **{pred['–ö–ª–∞—Å—Å']}** (–¶–≤–µ—Ç: {pred['–¶–≤–µ—Ç']}), –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']}")

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_df = pd.DataFrame(predictions)
    
    if os.path.exists(log_file):
        try:
            current = pd.read_csv(log_file, encoding='utf-8')
            if set(current.columns) == set(log_df.columns):
                log_df.to_csv(log_file, mode='a', index=False, header=False, encoding='utf-8-sig')
            else:
                log_df.to_csv(log_file, index=False, encoding='utf-8-sig')
        except:
            log_df.to_csv(log_file, index=False, encoding='utf-8-sig')
    else:
        log_df.to_csv(log_file, index=False, encoding='utf-8-sig')

# –ó–∞–ø—É—Å–∫ –≤–æ—Ç —Ç–∞–∫–æ–π # python -m streamlit run app.py
